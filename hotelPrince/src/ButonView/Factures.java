/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package ButonView;

import static DataBase.ConnectionBd.Connect;
import static DataBase.ConnectionBd.con;
import clients.clients;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import net.proteanit.sql.DbUtils;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author prince
 */
public class Factures extends javax.swing.JInternalFrame {
    PreparedStatement pst;
    ResultSet rs;
    /**
     * Creates new form Factures
     */
    public Factures() {
        initComponents();
        remove_title_bar();
        Connect();
        Table();
       //fac();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void remove_title_bar() {
        putClientProperty("Clients.isPalette", Boolean.TRUE);
        getRootPane().setWindowDecorationStyle(JRootPane.NONE);
        ((BasicInternalFrameUI) this.getUI()).setNorthPane(null);
        this.setBorder(null);
    }
    public void coloumnWidth() {
        TableColumnModel columnModel = jTable1.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(20);
        columnModel.getColumn(1).setPreferredWidth(96);
        columnModel.getColumn(2).setPreferredWidth(90);
        columnModel.getColumn(3).setPreferredWidth(90);
        columnModel.getColumn(4).setPreferredWidth(70);
        columnModel.getColumn(5).setPreferredWidth(70);
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        searchclient = new javax.swing.JTextField();

        setTitle("FACTURE");

        jLabel1.setBackground(new java.awt.Color(242, 102, 46));
        jLabel1.setFont(new java.awt.Font("Noto Serif CJK HK Black", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("GESTION FACTURES");
        jLabel1.setOpaque(true);

        jTable1.setFont(new java.awt.Font("C059", 0, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setGridColor(new java.awt.Color(204, 204, 204));
        jTable1.setRowHeight(28);
        jTable1.setSelectionBackground(new java.awt.Color(255, 204, 102));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setFont(new java.awt.Font("Noto Serif CJK HK Black", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 51, 102));
        jButton1.setText("PRINT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Noto Serif CJK HK Black", 0, 14)); // NOI18N
        jLabel2.setText("RECHERCHER");

        searchclient.setEditable(false);
        searchclient.setFont(new java.awt.Font("Noto Serif CJK HK Black", 0, 14)); // NOI18N
        searchclient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchclientActionPerformed(evt);
            }
        });
        searchclient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchclientKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1259, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(557, 557, 557)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(600, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchclient, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(220, 220, 220)))
                .addGap(175, 175, 175))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchclient, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchclientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchclientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchclientActionPerformed

    private void searchclientKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchclientKeyReleased
        // TODO add your handling code here:
        Table2();
    }//GEN-LAST:event_searchclientKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int index = jTable1.getSelectedRow();// index stock l'indice de la ligne sélectionné du tableau !!!

        if (index < 0) {
            JOptionPane.showMessageDialog(null, "Veuilez d'abord une ligne du tableau");
        } else {
            int id = Integer.parseInt(jTable1.getValueAt(index, 0).toString());
            try {

                JasperDesign jdesign = JRXmlLoader.load("/home/prince/hotelReports/facture.jrxml");
                Map<String, Object> para = new HashMap<String, Object>();
                para.put("id", id);
                JasperReport ireport = JasperCompileManager.compileReport(jdesign);
                JasperPrint jPrint = JasperFillManager.fillReport(ireport, para, con);
                JasperViewer.viewReport(jPrint, false);
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
//        int line = jTable1.getSelectedRow();
//        try {
//            int id = Integer.parseInt(jTable1.getValueAt(line, 0).toString());
//            JasperDesign jdesign = JRXmlLoader.load("/home/prince/hotelReports/facture1.jrxml");
//            Map<String, Object> para = new HashMap<String, Object>();
//            para.put("id_client", id);
//            JasperReport ireport = JasperCompileManager.compileReport(jdesign);
//            JasperPrint jPrint = JasperFillManager.fillReport(ireport, para, con);
//            JasperViewer.viewReport(jPrint, false);
//        } catch (Exception e) {
//            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
//        }
    }//GEN-LAST:event_jButton1ActionPerformed
    public void fac(){
        try {
            pst = con.prepareStatement("SELECT cl.client_id, cl.nom AS 'Nom', cl.prenom AS'Prénoms',ch.tarif AS 'Tarif chambre', gb.typeBoisson AS 'Type Boisson', gb.libelleBoisson AS 'Libellé', gb.prixBoisson AS 'PU',cmb.date_commande AS 'Date', cmb.quantite_commande AS 'Quantité boisson', cmb.prix_total AS 'Prix total Boisson',gr.typePlat AS 'Catégorie', gr.libellePlat AS 'Libellé',gr.prixPlat AS 'Prix',cmp.quantite_plat AS 'Quantité Plat',cmp.date_commande AS 'Date',cmp.prix_total AS 'Prix Total Plat',DATEDIFF(r.date_depart, r.date_arrivee) AS 'Séjour',\n" +
"\n" +
"    SUM(COALESCE(cmb.prix_total, 0) + COALESCE(cmp.prix_total, 0)) +ch.tarif* CAST(DATEDIFF(r.date_depart, r.date_arrivee) AS decimal(10,2))AS 'Montant Total'\n" +
"\n" +
"FROM clients cl\n" +
"\n" +
"JOIN reservations r ON r.client_id = cl.client_id\n" +
"\n" +
"JOIN chambres ch ON ch.chambre_id = r.chambre_id\n" +
"\n" +
"LEFT JOIN consommationPlat cmp ON cl.client_id = cmp.client_id\n" +
"\n" +
"LEFT JOIN GestionRestaurant gr ON gr.id_plat = cmp.id_plat\n" +
"\n" +
"LEFT JOIN consommationBoisson cmb ON cmb.client_id = cl.client_id\n" +
"\n" +
"LEFT JOIN GestionBar gb ON gb.id_bar = cmb.id_bar\n" +
"\n" +
"GROUP BY cl.client_id, cmp.id_plat, cmb.id_bar;");
            
            rs = pst.executeQuery();
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
        }
    }
    private void Table() {

        String[] clients = {"Matricule_Client", "NOM", "PRÉNOM", "TÉLÉPHONE", "NATIONALITÉ", "CATÉGORIE"};
        String[] affiche = new String[11];
        DefaultTableModel mod = new DefaultTableModel(null, clients);

        try {

            Statement st = con.createStatement();
            rs = st.executeQuery("SELECT * FROM clients;");

            while (rs.next()) {
                affiche[0] = rs.getString("client_id");
                affiche[1] = rs.getString("nom");
                affiche[2] = rs.getString("prenom");
                affiche[3] = rs.getString("telephone");
                affiche[4] = rs.getString("nationalite");
                affiche[5] = rs.getString("categorie");
                affiche[6] = rs.getString("carte_fidelite");
                //affiche[7] = rs.getBlob("photo");

                mod.addRow(affiche);
            }

            jTable1.setModel(mod);
            coloumnWidth();
        } catch (Exception e) {
            e.printStackTrace();// Affiche l'erreur retourné dans le terminal si le try n'a pas pu être éxécuté 
            JOptionPane.showMessageDialog(null, " " + e.getMessage());
        }

    }
    public void Table2() {
        String[] clients = {"Matricule_Client", "NOM", "PRÉNOM", "TÉLÉPHONE", "NATIONALITÉ", "CATÉGORIE"};
        String[] affiche = new String[11];
        DefaultTableModel mod = new DefaultTableModel(null, clients);
        String clientSearch = searchclient.getText();
        ResultSet rst;

        if ("-1".equals(clientSearch)) {

            try {
                Statement s = con.createStatement();
                rst = s.executeQuery("SELECT * FROM clients ORDER BY client_id DESC");
                while (rst.next()) {
                    affiche[0] = rst.getString("client_id");
                    affiche[1] = rst.getString("nom");
                    affiche[2] = rst.getString("prenom");
                    affiche[3] = rst.getString("telephone");
                    affiche[4] = rst.getString("nationalite");
                    affiche[5] = rst.getString("categorie");
                    affiche[6] = rst.getString("carte_fidelite");

                    mod.addRow(affiche);
                }
                jTable1.setModel(mod);

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, " " + e.getMessage());
            }
        } else {
            try {
                pst = con.prepareStatement("SELECT * FROM clients WHERE (nom LIKE ?) OR (prenom LIKE ?) OR (nationalite LIKE ?) OR (categorie LIKE ?) ;");
                for (int i = 1; i < 5; i++) {
                    pst.setString(i, "%" + clientSearch + "%");
                }
                rst = pst.executeQuery();
                while (rst.next()) {
                    affiche[0] = rst.getString("client_id");
                    affiche[1] = rst.getString("nom");
                    affiche[2] = rst.getString("prenom");
                    affiche[3] = rst.getString("telephone");
                    affiche[4] = rst.getString("nationalite");
                    affiche[5] = rst.getString("categorie");
                    affiche[6] = rst.getString("carte_fidelite");

                    mod.addRow(affiche);
                }
                jTable1.setModel(mod);
                coloumnWidth();
            } catch (SQLException ex) {
                Logger.getLogger(clients.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Sorry ! Erreur survenu lors de la recherche \n " + ex.getMessage());
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField searchclient;
    // End of variables declaration//GEN-END:variables
}
